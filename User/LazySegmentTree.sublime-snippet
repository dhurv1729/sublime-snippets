<snippet>
	<content><![CDATA[
struct node {
    // define the node structure.
};

struct update {
    // define the update structure.  
};

struct LazySegmentTree {

    int len;
    node IE;
    vector<node> S;
    vector<bool> lazy;
    update IU;
    vector<update> upd;

    LazySegmentTree(int len) {
        this->len = len;
        S.resize(4*len); lazy.resize(4*len); upd.resize(4*len);
        // define the IE and IU hear.
    } 

    node mearge(node &a, node &b) {
        node res;
        // mearge two node hear.
        return res;
    } 

    template<typename T>

    void build(const T &arr, int v, int tl, int tr) {
        if(tl == tr) {
            // base case.
            return;
        }
        int tm = tm = (tl + tr) >> 1;
        build(arr,v<<1,tl,tm); build(arr,v<<1|1,tm+1,tr);
        S[v] = mearge(S[v<<1], S[v<<1|1]);
    }

    void apply(int v, int tl, int tr, update &u) {
        // process S[v] and upd[v] and make lazy[v] = 1;
    }

    void pushdown(int v, int tl, int tr) {
        if(!lazy[v]) return;
        int tm = (tl + tr) >> 1;
        apply(v<<1,tl,tm,upd[v]); apply(v<<1|1,tm+1,tr,upd[v]);
        upd[v] = IU;
        lazy[v] = 0;
    }

    void rupd(int v, int tl, int tr, int l, int r, update &u) {
        if(tl > r or tr < l) return;
        if(l <= tl and tr <= r) { apply(v, tl, tr, u); return; }
        int tm = (tl + tr) / 2; pushdown(v, tl, tr);
        rupd(2*v, tl, tm, l, r, u); rupd(2*v+1, tm+1, tr, l, r, u);
        S[v] = mearge(S[v<<1], S[v<<1|1]);
    }

    node query(int v, int tl, int tr, int l, int r) {
        if(tl > r or tr < l) return IE;
        if(l <= tl and tr <= r) return S[v]; 
        int tm = (tl + tr) / 2; pushdown(v, tl, tr);
        node a = query(2*v, tl, tm, l, r), b = query(2*v+1, tm+1, tr, l, r);
        node ans = mearge(a, b); return ans;
    }

    template<typename T>
    void build(const T &arr) { build(arr, 1, 0, len-1); }
    void rupd(int l, int r, update u) { rupd(1, 0, len-1, l, r, u); }
    node query(int l, int r) { return query(1, 0, len-1, l, r); }

};
]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	<tabTrigger>LazySegmentTree</tabTrigger>
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	<!-- <scope>source.python</scope> -->
</snippet>
